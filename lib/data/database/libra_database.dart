import 'dart:io';
import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:intl/intl.dart';
import 'package:libra_sheet/data/database/accounts.dart';
import 'package:libra_sheet/data/database/allocations.dart';
import 'package:libra_sheet/data/database/categories.dart';
import 'package:libra_sheet/data/database/category_history.dart';
import 'package:libra_sheet/data/database/reimbursements.dart';
import 'package:libra_sheet/data/database/rules.dart';
import 'package:libra_sheet/data/database/tags.dart';
import 'package:libra_sheet/data/database/transactions.dart';
import 'package:libra_sheet/data/export/google_drive.dart';
import 'package:path/path.dart';
import 'package:sqflite_common_ffi/sqflite_ffi.dart';
import 'package:sqflite_common_ffi_web/sqflite_ffi_web.dart';
import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';

final _backupDateFormat = DateFormat('yyyy-MM-dd_HH-mm-ss');

class LibraDatabase {
  //-------------------------------------------------------------------------------------
  // Singleton setup (is this even needed? everything is static)
  //-------------------------------------------------------------------------------------
  LibraDatabase._internal();
  static final LibraDatabase _instance = LibraDatabase._internal();
  factory LibraDatabase() {
    return _instance;
  }

  //-------------------------------------------------------------------------------------
  // Members
  //-------------------------------------------------------------------------------------
  static late String databasePath;
  static Database? _db;
  static Function(dynamic)? errorCallback;

  static Future<bool> isEmpty() async {
    if (_db == null) return true;
    return await _db!.countAccounts() == 0;
  }

  //-------------------------------------------------------------------------------------
  // Database setup
  //-------------------------------------------------------------------------------------
  static Future<String> _getDatabasePath() async {
    if (_db != null) return _db!.path;

    if (kIsWeb) return "libra_sheet.db";

    /// Windows: C:\Users\riley\Documents\Projects\libra_sheet\.dart_tool\sqflite_common_ffi\databases\libra_sheet.db
    /// Windows exe: C:\Users\riley\Documents\Projects\libra_sheet\build\windows\runner\Release\.dart_tool\sqflite_common_ffi\databases\libra_sheet.db
    /// Mac: /Users/riley/Library/Containers/com.example.libraSheet/Data/Documents/libra_sheet.db
    // final path = join(await getDatabasesPath(), 'libra_sheet.db');
    final appDocumentsDir = await getApplicationDocumentsDirectory();
    if (kDebugMode) {
      return join(appDocumentsDir.path, "Libra Sheet", "Debug", "libra_sheet.db");
    } else {
      return join(appDocumentsDir.path, "Libra Sheet", "libra_sheet.db");
    }
  }

  static Future<void> open() async {
    _db = await openDatabase(
      databasePath,
      version: 17,
      onCreate: _createDatabase,
      onUpgrade: _upgradeDatabase,
    );
  }

  static Future<void> init() async {
    WidgetsFlutterBinding.ensureInitialized();

    if (kIsWeb) {
      databaseFactory = databaseFactoryFfiWeb;
    } else {
      if (Platform.isWindows || Platform.isLinux) {
        sqfliteFfiInit();
        databaseFactory = databaseFactoryFfi;
      }
    }
    databasePath = await _getDatabasePath();
    debugPrint('LibraDatabase::init() path=$databasePath');
    await open();
  }

  static Future<void> close() async {
    _db?.close();
    _db = null;
  }

  //-------------------------------------------------------------------------------------
  // Actions
  //-------------------------------------------------------------------------------------

  static Future<void> sync() async {
    try {
      await GoogleDrive().logLocalUpdate();
    } catch (e) {
      debugPrint("LibraDatabase::sync() caught $e");
      errorCallback?.call(e);
    }
  }

  static Future<T?> read<T>(Future<T> Function(Database db) callback) async {
    try {
      if (_db == null) throw StateError("Database not initialized");
      return callback(_db!);
    } catch (e) {
      debugPrint("LibraDatabase::read() caught $e");
      errorCallback?.call(e);
      return null;
    }
  }

  /// Like [read] but will not catch any errors, instead passing them up to the caller.
  static Future<T> readThrow<T>(Future<T> Function(Database db) callback) async {
    if (_db == null) throw StateError("Database not initialized");
    return callback(_db!);
  }

  static Future<void> readTransaction(Future Function(Transaction txn) callback) async {
    try {
      if (_db == null) throw StateError("Database not initialized");
      await _db!.transaction(callback);
    } catch (e) {
      debugPrint("LibraDatabase::readTransaction() caught $e");
      errorCallback?.call(e);
    }
  }

  static Future<T?> update<T>(Future<T> Function(Database db) callback) async {
    try {
      if (_db == null) throw StateError("Database not initialized");
      final out = await callback(_db!);
      sync();
      return out;
    } catch (e) {
      debugPrint("LibraDatabase::update() caught $e");
      errorCallback?.call(e);
      return null;
    }
  }

  static Future<void> updateTransaction(Future Function(Transaction txn) callback) async {
    try {
      if (_db == null) throw StateError("Database not initialized");
      await _db!.transaction(callback);
      sync();
    } catch (e) {
      debugPrint("LibraDatabase::updateTransaction() caught $e");
      errorCallback?.call(e);
    }
  }

  //-------------------------------------------------------------------------------------
  // Backup
  //-------------------------------------------------------------------------------------
  static DateTime _lastBackupTime = DateTime.now();
  // DateTime.now().difference(_lastBackupTime).inSeconds > 10) backup();

  static Future<void> backup({String? tag}) async {
    if (kIsWeb) {
      return;
    }

    _lastBackupTime = DateTime.now();
    final timestamp = _backupDateFormat.format(_lastBackupTime);

    String newPath;
    if (databasePath.endsWith('.db')) {
      newPath = "${databasePath.substring(0, databasePath.length - 3)}_$timestamp$tag.db";
    } else {
      newPath = "${databasePath}_$timestamp$tag";
    }
    await File(databasePath).copy(newPath);
    debugPrint("LibraDatabase::backup() Backed up to $newPath");
  }

  //-------------------------------------------------------------------------------------
  // Create
  //-------------------------------------------------------------------------------------
  static Future<void> _upgradeDatabase(Database db, int oldVersion, int newVersion) async {
    await backup(tag: '_upgrade$oldVersion-$newVersion');
    if (oldVersion <= 14 && newVersion >= 15) {
      await _upgrade14_15(db, oldVersion, newVersion);
    }

    if (oldVersion <= 15 && newVersion >= 16) {
      await _upgrade15_16(db);
    }

    if (oldVersion <= 16 && newVersion >= 17) {
      await _upgrade16_17(db);
    }
  }
}

FutureOr<void> _createDatabase(Database db, int version) async {
  await db.execute(createAccountsTableSql);
  await db.execute(upgradeAccountsTableSql_15_16);
  await db.execute(createCategoryTableSql);
  await db.execute(createCategoryHistoryTableSql);
  await db.execute(createRulesTableSql);
  await db.execute(createTagsTableSql);
  await db.execute(createTransactionsTableSql);
  await db.execute(createAllocationsTableSql);
  await db.execute(createReimbursementsTableSql);
  await db.execute(createTagJoinTableSql);
  await db.execute(createDefaultCategories);
  if (kDebugMode) {
    // await db.execute(createTestAccountsSql);
    // await db.execute(createTestTagsSql);
  }
  if (kIsWeb) {
    await _hydrateDummyData(db);
  }
  if (version >= 17) {
    await _upgrade16_17(db);
  }
}

Future<void> _upgrade14_15(Database db, int oldVersion, int newVersion) async {
  await db.execute("ALTER TABLE $tagsTable DROP COLUMN list_index;");
  await db.execute("ALTER TABLE $tagsTable ADD listIndex INTEGER NULL;");
  await db.execute("""
    WITH cte AS (
      SELECT 
        id, ROW_NUMBER() OVER(ORDER BY id) AS newIndex 
      FROM $tagsTable
    )
    UPDATE $tagsTable SET listIndex = cte.newIndex - 1
    FROM cte
    WHERE $tagsTable.id = cte.id
  """);
}

Future<void> _upgrade15_16(Database db) async {
  await db.execute(upgradeAccountsTableSql_15_16);
}

Future<void> _upgrade16_17(Database db) async {
  await db.execute(addAllocationTimestampColumnSql);
}

const _initAccounts = '''
INSERT INTO "accounts" ("id", "name", "description", "type", "csvPattern", "screenReaderAlias", "colorLong", "listIndex", "last_user_update") VALUES
(1, 'Cash', '', 'Cash', '', '', 4291354680, 0, NULL),
(2, 'Checkings', 'x0123', 'Bank', 'name,value,date', '', 4279670830, 1, NULL),
(3, 'Savings', 'x9876', 'Bank', 'name,value,date', '', 4280707548, 2, NULL),
(4, 'Credit Card', 'x5555', 'Liability', 'name,neg_value,date', '', 4290471240, 4, NULL),
(5, '401k', '', 'Investment', 'name,value,date', '', 4287118461, 3, NULL);
''';

const _initHistory = '''
INSERT INTO "category_history" ("account_id", "category_id", "date", "value") VALUES
(2, -3, 1717200000000, 0),
(2, -3, 1719792000000, 63000000),
(2, -3, 1722470400000, -15000000),
(2, -3, 1725148800000, -10000000),
(2, -3, 1727740800000, -10000000),
(2, -3, 1730419200000, 32000000),
(2, -3, 1733011200000, 24000000),
(2, -3, 1735689600000, -18000000),
(2, -3, 1738368000000, -20000000),
(2, -3, 1740787200000, -20000000),
(2, -3, 1743465600000, 34000000),
(2, -3, 1746057600000, -18000000),
(2, -3, 1748736000000, 24000000),
(2, 7, 1719792000000, -985100),
(2, 7, 1722470400000, -851200),
(2, 7, 1725148800000, -507000),
(2, 7, 1727740800000, -757600),
(2, 7, 1730419200000, -686300),
(2, 7, 1733011200000, -593100),
(2, 7, 1735689600000, -542500),
(2, 7, 1738368000000, -537600),
(2, 7, 1740787200000, -588800),
(2, 7, 1743465600000, -933800),
(2, 7, 1746057600000, -967000),
(2, 7, 1748736000000, -986000),
(2, 22, 1719792000000, -250000),
(2, 22, 1722470400000, -250000),
(2, 22, 1725148800000, -250000),
(2, 22, 1727740800000, -250000),
(2, 22, 1730419200000, -250000),
(2, 22, 1733011200000, -250000),
(2, 22, 1735689600000, -250000),
(2, 22, 1738368000000, -250000),
(2, 22, 1740787200000, -250000),
(2, 22, 1743465600000, -250000),
(2, 22, 1746057600000, -250000),
(2, 22, 1748736000000, -250000),
(2, 47, 1719792000000, -800000),
(2, 47, 1722470400000, -800000),
(2, 47, 1725148800000, -800000),
(2, 47, 1727740800000, -800000),
(2, 47, 1730419200000, -800000),
(2, 47, 1733011200000, -800000),
(2, 47, 1735689600000, -800000),
(2, 47, 1738368000000, -800000),
(2, 47, 1740787200000, -800000),
(2, 47, 1743465600000, -800000),
(2, 47, 1746057600000, -800000),
(2, 47, 1748736000000, -800000),
(3, -3, 1719792000000, 100000000),
(3, -3, 1722470400000, 0),
(3, -3, 1725148800000, 0),
(3, -3, 1727740800000, 0),
(3, -3, 1730419200000, -50000000),
(3, -3, 1733011200000, -40000000),
(3, -3, 1735689600000, 0),
(3, -3, 1738368000000, 0),
(3, -3, 1740787200000, 0),
(3, -3, 1743465600000, -50000000),
(3, -3, 1746057600000, 0),
(3, -3, 1748736000000, -40000000),
(3, 4, 1719792000000, 384700),
(3, 4, 1722470400000, 412300),
(3, 4, 1725148800000, 398500),
(3, 4, 1727740800000, 421000),
(3, 4, 1730419200000, 379200),
(3, 4, 1733011200000, 406800),
(3, 4, 1735689600000, 393400),
(3, 4, 1738368000000, 417600),
(3, 4, 1740787200000, 388900),
(3, 4, 1743465600000, 401500),
(3, 4, 1746057600000, 423300),
(3, 4, 1748736000000, 397100),
(3, 8, 1719792000000, -18000000),
(3, 8, 1722470400000, -18000000),
(3, 8, 1725148800000, -18000000),
(3, 8, 1727740800000, -18000000),
(3, 8, 1730419200000, -18000000),
(3, 8, 1733011200000, -18000000),
(3, 8, 1735689600000, -18000000),
(3, 8, 1738368000000, -18000000),
(3, 8, 1740787200000, -18000000),
(3, 8, 1743465600000, -18000000),
(3, 8, 1746057600000, -18000000),
(3, 8, 1748736000000, -18000000),
(3, 42, 1719792000000, 40000000),
(3, 42, 1722470400000, 60000000),
(3, 42, 1725148800000, 40000000),
(3, 42, 1727740800000, 40000000),
(3, 42, 1730419200000, 40000000),
(3, 42, 1733011200000, 40000000),
(3, 42, 1735689600000, 60000000),
(3, 42, 1738368000000, 40000000),
(3, 42, 1740787200000, 40000000),
(3, 42, 1743465600000, 40000000),
(3, 42, 1746057600000, 40000000),
(3, 42, 1748736000000, 40000000),
(4, -3, 1719792000000, 17000000),
(4, -3, 1722470400000, 15000000),
(4, -3, 1725148800000, 10000000),
(4, -3, 1727740800000, 10000000),
(4, -3, 1730419200000, 18000000),
(4, -3, 1733011200000, 16000000),
(4, -3, 1735689600000, 18000000),
(4, -3, 1738368000000, 20000000),
(4, -3, 1740787200000, 20000000),
(4, -3, 1743465600000, 16000000),
(4, -3, 1746057600000, 18000000),
(4, -3, 1748736000000, 16000000),
(4, 9, 1719792000000, -3459300),
(4, 9, 1722470400000, -3331100),
(4, 9, 1725148800000, -1948900),
(4, 9, 1727740800000, -7399000),
(4, 9, 1730419200000, -5197000),
(4, 9, 1733011200000, -3641000),
(4, 9, 1735689600000, -4768800),
(4, 9, 1738368000000, -8187200),
(4, 9, 1740787200000, -5167600),
(4, 9, 1743465600000, -4473100),
(4, 9, 1746057600000, -5925700),
(4, 9, 1748736000000, -6175700),
(4, 11, 1719792000000, -2584800),
(4, 11, 1722470400000, -1849900),
(4, 11, 1725148800000, -832100),
(4, 11, 1727740800000, -1796700),
(4, 11, 1730419200000, -967800),
(4, 11, 1733011200000, -1024500),
(4, 11, 1735689600000, -1675500),
(4, 11, 1738368000000, -932500),
(4, 11, 1740787200000, -1757800),
(4, 11, 1743465600000, -869000),
(4, 11, 1746057600000, -1830800),
(4, 11, 1748736000000, -924000),
(4, 12, 1719792000000, 0),
(4, 12, 1722470400000, 0),
(4, 12, 1725148800000, 0),
(4, 12, 1727740800000, 0),
(4, 12, 1730419200000, 0),
(4, 12, 1733011200000, 0),
(4, 12, 1735689600000, 0),
(4, 12, 1738368000000, 0),
(4, 12, 1740787200000, 0),
(4, 12, 1743465600000, 0),
(4, 12, 1746057600000, 0),
(4, 12, 1748736000000, 0),
(4, 13, 1719792000000, -1829300),
(4, 13, 1722470400000, -2447200),
(4, 13, 1725148800000, -2571900),
(4, 13, 1727740800000, -2392500),
(4, 13, 1730419200000, -2460300),
(4, 13, 1733011200000, -2901300),
(4, 13, 1735689600000, -1933500),
(4, 13, 1738368000000, -2511200),
(4, 13, 1740787200000, -1594400),
(4, 13, 1743465600000, -1737000),
(4, 13, 1746057600000, -2961500),
(4, 13, 1748736000000, -1566800),
(4, 14, 1719792000000, -343500),
(4, 14, 1722470400000, -428000),
(4, 14, 1725148800000, -303000),
(4, 14, 1727740800000, -454000),
(4, 14, 1730419200000, -365000),
(4, 14, 1733011200000, -385000),
(4, 14, 1735689600000, -331000),
(4, 14, 1738368000000, -463900),
(4, 14, 1740787200000, -439500),
(4, 14, 1743465600000, -437000),
(4, 14, 1746057600000, -337000),
(4, 14, 1748736000000, -593000),
(4, 17, 1719792000000, -7651000),
(4, 17, 1722470400000, -6581600),
(4, 17, 1725148800000, -5494800),
(4, 17, 1727740800000, -4208900),
(4, 17, 1730419200000, -5227200),
(4, 17, 1733011200000, -8822000),
(4, 17, 1735689600000, -5207900),
(4, 17, 1738368000000, -2642700),
(4, 17, 1740787200000, -5908100),
(4, 17, 1743465600000, -7577800),
(4, 17, 1746057600000, -6211300),
(4, 17, 1748736000000, -4713600),
(4, 23, 1719792000000, -285000),
(4, 23, 1725148800000, -285000),
(4, 23, 1730419200000, -2000000),
(4, 26, 1719792000000, -396600),
(4, 26, 1722470400000, -314500),
(4, 26, 1725148800000, -456300),
(4, 26, 1727740800000, -223400),
(4, 26, 1730419200000, -486200),
(4, 26, 1733011200000, -245600),
(4, 26, 1735689600000, -396700),
(4, 26, 1738368000000, -259900),
(4, 26, 1740787200000, -437900),
(4, 26, 1743465600000, -189900),
(4, 26, 1746057600000, -277800),
(4, 26, 1748736000000, -422300),
(4, 32, 1719792000000, -870500),
(4, 32, 1722470400000, -489000),
(4, 32, 1725148800000, -920500),
(4, 32, 1727740800000, -465500),
(4, 32, 1730419200000, -930500),
(4, 32, 1733011200000, -517000),
(4, 32, 1735689600000, -919500),
(4, 32, 1738368000000, -409000),
(4, 32, 1740787200000, -458000),
(4, 32, 1743465600000, -909000),
(4, 32, 1746057600000, -501500),
(4, 32, 1748736000000, -924500),
(4, 39, 1738368000000, -4000000),
(5, -4, 1717200000000, 0),
(5, -4, 1719792000000, 10961000),
(5, -4, 1722470400000, 12072400),
(5, -4, 1725148800000, 7882500),
(5, -4, 1727740800000, 7624500),
(5, -4, 1730419200000, 2604100),
(5, -4, 1733011200000, -4443500),
(5, -4, 1735689600000, -915100),
(5, -4, 1738368000000, 3135900),
(5, -4, 1740787200000, 19042100),
(5, -4, 1743465600000, -35901600),
(5, -4, 1746057600000, 30332400),
(5, -4, 1748736000000, 26015700),
(5, -3, 1719792000000, 50000000),
(5, 43, 1719792000000, 10000000),
(5, 43, 1722470400000, 15000000),
(5, 43, 1725148800000, 10000000),
(5, 43, 1727740800000, 10000000),
(5, 43, 1730419200000, 10000000),
(5, 43, 1733011200000, 10000000),
(5, 43, 1735689600000, 15000000),
(5, 43, 1738368000000, 10000000),
(5, 43, 1740787200000, 10000000),
(5, 43, 1743465600000, 10000000),
(5, 43, 1746057600000, 10000000),
(5, 43, 1748736000000, 10000000);
''';

const _initReimbs = '''
INSERT INTO "reimbursements" ("expenseId", "incomeId", "value") VALUES
(546, 545, 40000000),
(560, 559, 50000000),
(712, 711, 50000000),
(714, 713, 40000000);
''';

const _initRules = '''
INSERT INTO "rules" ("key", "pattern", "categoryKey", "accountKey", "type", "listIndex") VALUES
(1, 'Utilities', 7, 0, 'expense', 0),
(5, 'Transfer', -3, 0, 'income', 0),
(6, 'Transfer', -3, 0, 'expense', 0),
(8, 'Starbucks', 14, 0, 'expense', 0),
(10, 'Panda Express', 12, 0, 'expense', 0),
(16, 'Walgreens', 26, 0, 'expense', 0),
(19, 'AMC', 23, 0, 'expense', 0),
(20, 'Netflix', 22, 0, 'expense', 0),
(21, 'Gym', 47, 0, 'expense', 0),
(22, 'Interest', 4, 0, 'income', 0);
''';

const _initTransactions = '''
INSERT INTO "transactions_table" ("id", "name", "date", "note", "value", "account_id", "category_id") VALUES
(2, 'Utilities', 1722470400000, '', -851200, 2, 7),
(3, 'Utilities', 1725235200000, '', -507000, 2, 7),
(4, 'Utilities', 1727740800000, '', -757600, 2, 7),
(5, 'Utilities', 1730419200000, '', -686300, 2, 7),
(6, 'Utilities', 1733097600000, '', -593100, 2, 7),
(7, 'Utilities', 1735689600000, '', -542500, 2, 7),
(8, 'Utilities', 1738540800000, '', -537600, 2, 7),
(9, 'Utilities', 1740960000000, '', -588800, 2, 7),
(10, 'Utilities', 1743465600000, '', -933800, 2, 7),
(11, 'Utilities', 1746057600000, '', -967000, 2, 7),
(12, 'Utilities', 1748822400000, '', -986000, 2, 7),
(13, 'Starting Balance - To quickstart existing accounts, choose a start date and mark the balance at that time. Then you only need to consider transactions after that date.', 1719792000000, '', 80000000, 2, -3),
(14, 'Utilities', 1719792000000, '', -985100, 2, 7),
(15, 'Starting Balance - To quickstart existing accounts, choose a start date and mark the balance at that time. Then you only need to consider transactions after that date.', 1719792000000, '', 100000000, 3, -3),
(16, 'Starting Balance - To quickstart existing accounts, choose a start date and mark the balance at that time. Then you only need to consider transactions after that date.', 1719792000000, '', 50000000, 5, -3),
(17, 'Rent', 1719792000000, '', -18000000, 3, 8),
(18, 'Rent', 1722470400000, '', -18000000, 3, 8),
(19, 'Rent', 1725235200000, '', -18000000, 3, 8),
(20, 'Rent', 1727740800000, '', -18000000, 3, 8),
(21, 'Rent', 1730419200000, '', -18000000, 3, 8),
(22, 'Rent', 1733097600000, '', -18000000, 3, 8),
(23, 'Rent', 1735689600000, '', -18000000, 3, 8),
(24, 'Rent', 1738540800000, '', -18000000, 3, 8),
(25, 'Rent', 1740960000000, '', -18000000, 3, 8),
(26, 'Rent', 1743465600000, '', -18000000, 3, 8),
(27, 'Rent', 1746057600000, '', -18000000, 3, 8),
(28, 'Rent', 1748822400000, '', -18000000, 3, 8),
(29, 'Paycheck', 1720137600000, '', 20000000, 3, 42),
(30, 'Paycheck', 1721347200000, '', 20000000, 3, 42),
(31, 'Paycheck', 1722556800000, '', 20000000, 3, 42),
(32, 'Paycheck', 1723766400000, '', 20000000, 3, 42),
(33, 'Paycheck', 1724976000000, '', 20000000, 3, 42),
(34, 'Paycheck', 1726185600000, '', 20000000, 3, 42),
(35, 'Paycheck', 1727395200000, '', 20000000, 3, 42),
(36, 'Paycheck', 1728604800000, '', 20000000, 3, 42),
(37, 'Paycheck', 1729814400000, '', 20000000, 3, 42),
(38, 'Paycheck', 1731024000000, '', 20000000, 3, 42),
(39, 'Paycheck', 1732233600000, '', 20000000, 3, 42),
(40, 'Paycheck', 1733443200000, '', 20000000, 3, 42),
(41, 'Paycheck', 1734652800000, '', 20000000, 3, 42),
(42, 'Paycheck', 1735862400000, '', 20000000, 3, 42),
(43, 'Paycheck', 1737072000000, '', 20000000, 3, 42),
(44, 'Paycheck', 1738281600000, '', 20000000, 3, 42),
(45, 'Paycheck', 1739491200000, '', 20000000, 3, 42),
(46, 'Paycheck', 1740700800000, '', 20000000, 3, 42),
(47, 'Paycheck', 1741910400000, '', 20000000, 3, 42),
(48, 'Paycheck', 1743120000000, '', 20000000, 3, 42),
(49, 'Paycheck', 1744329600000, '', 20000000, 3, 42),
(50, 'Paycheck', 1745539200000, '', 20000000, 3, 42),
(51, 'Paycheck', 1746748800000, '', 20000000, 3, 42),
(52, 'Paycheck', 1747958400000, '', 20000000, 3, 42),
(53, 'Paycheck', 1749168000000, '', 20000000, 3, 42),
(54, 'Paycheck', 1750377600000, '', 20000000, 3, 42),
(55, '401k Contribution', 1720137600000, '', 5000000, 5, 43),
(56, '401k Contribution', 1721347200000, '', 5000000, 5, 43),
(57, '401k Contribution', 1722556800000, '', 5000000, 5, 43),
(58, '401k Contribution', 1723766400000, '', 5000000, 5, 43),
(59, '401k Contribution', 1724976000000, '', 5000000, 5, 43),
(60, '401k Contribution', 1726185600000, '', 5000000, 5, 43),
(61, '401k Contribution', 1727395200000, '', 5000000, 5, 43),
(62, '401k Contribution', 1728604800000, '', 5000000, 5, 43),
(63, '401k Contribution', 1729814400000, '', 5000000, 5, 43),
(64, '401k Contribution', 1731024000000, '', 5000000, 5, 43),
(65, '401k Contribution', 1732233600000, '', 5000000, 5, 43),
(66, '401k Contribution', 1733443200000, '', 5000000, 5, 43),
(67, '401k Contribution', 1734652800000, '', 5000000, 5, 43),
(68, '401k Contribution', 1735862400000, '', 5000000, 5, 43),
(69, '401k Contribution', 1737072000000, '', 5000000, 5, 43),
(70, '401k Contribution', 1738281600000, '', 5000000, 5, 43),
(71, '401k Contribution', 1739491200000, '', 5000000, 5, 43),
(72, '401k Contribution', 1740700800000, '', 5000000, 5, 43),
(73, '401k Contribution', 1741910400000, '', 5000000, 5, 43),
(74, '401k Contribution', 1743120000000, '', 5000000, 5, 43),
(75, '401k Contribution', 1744329600000, '', 5000000, 5, 43),
(76, '401k Contribution', 1745539200000, '', 5000000, 5, 43),
(77, '401k Contribution', 1746748800000, '', 5000000, 5, 43),
(78, '401k Contribution', 1747958400000, '', 5000000, 5, 43),
(79, '401k Contribution', 1749168000000, '', 5000000, 5, 43),
(80, '401k Contribution', 1750377600000, '', 5000000, 5, 43),
(82, 'Market Change', 1722384000000, '', 10961000, 5, -4),
(83, 'Market Change', 1724976000000, '', 12072400, 5, -4),
(84, 'Market Change', 1727654400000, '', 7882500, 5, -4),
(85, 'Market Change', 1730332800000, '', 7624500, 5, -4),
(86, 'Market Change', 1732838400000, '', 2604100, 5, -4),
(87, 'Market Change', 1735603200000, '', -4443500, 5, -4),
(88, 'Market Change', 1738281600000, '', -915100, 5, -4),
(89, 'Market Change', 1740700800000, '', 3135900, 5, -4),
(90, 'Market Change', 1743379200000, '', 19042100, 5, -4),
(91, 'Market Change', 1745971200000, '', -35901600, 5, -4),
(92, 'Market Change', 1748563200000, '', 30332400, 5, -4),
(93, 'Market Change', 1751241600000, '', 26015700, 5, -4),
(394, 'Groceries', 1719878400000, '', -874300, 4, 11),
(395, 'Coffee Shop', 1719964800000, '', -129500, 4, 14),
(396, 'Gas Station', 1720137600000, '', -452000, 4, 32),
(397, 'Clothes', 1720396800000, '', -1299900, 4, 17),
(398, 'Pharmacy', 1720569600000, '', -236700, 4, 26),
(399, 'Restaurant', 1720742400000, '', -567800, 4, 13),
(400, 'Supplies', 1721001600000, '', -342100, 4, 9),
(401, 'Groceries', 1721260800000, '', -921500, 4, 11),
(402, 'Movie Theater', 1721433600000, '', -285000, 4, 23),
(403, 'Clothes', 1721606400000, '', -850000, 4, 17),
(404, 'Gas Station', 1721865600000, '', -418500, 4, 32),
(405, 'Pharmacy', 1722038400000, '', -159900, 4, 26),
(406, 'Groceries', 1722297600000, '', -789000, 4, 11),
(407, 'Coffee Shop', 1722470400000, '', -87500, 4, 14),
(408, 'Supplies', 1722643200000, '', -674300, 4, 9),
(409, 'Restaurant', 1722902400000, '', -732500, 4, 13),
(410, 'Clothes', 1723161600000, '', -1567800, 4, 17),
(411, 'Groceries', 1723420800000, '', -893200, 4, 11),
(412, 'Pharmacy', 1723593600000, '', -314500, 4, 26),
(413, 'Gas Station', 1723852800000, '', -489000, 4, 32),
(414, 'Coffee Shop', 1724025600000, '', -112000, 4, 14),
(415, 'Supplies', 1724284800000, '', -299900, 4, 9),
(416, 'Restaurant', 1724544000000, '', -648800, 4, 13),
(417, 'Clothes', 1724803200000, '', -985000, 4, 17),
(418, 'Groceries', 1724976000000, '', -956700, 4, 11),
(419, 'Pharmacy', 1725235200000, '', -187500, 4, 26),
(420, 'Gas Station', 1725494400000, '', -523000, 4, 32),
(421, 'Coffee Shop', 1725667200000, '', -94500, 4, 14),
(422, 'Supplies', 1725926400000, '', -456700, 4, 9),
(423, 'Restaurant', 1726185600000, '', -819900, 4, 13),
(424, 'Clothes', 1726444800000, '', -1123400, 4, 17),
(425, 'Groceries', 1726704000000, '', -832100, 4, 11),
(426, 'Pharmacy', 1726963200000, '', -268800, 4, 26),
(427, 'Gas Station', 1727222400000, '', -397500, 4, 32),
(428, 'Coffee Shop', 1727481600000, '', -136000, 4, 14),
(429, 'Supplies', 1727740800000, '', -589000, 4, 9),
(430, 'Restaurant', 1728000000000, '', -694500, 4, 13),
(431, 'Clothes', 1728259200000, '', -1456700, 4, 17),
(432, 'Groceries', 1728518400000, '', -912300, 4, 11),
(433, 'Pharmacy', 1728777600000, '', -223400, 4, 26),
(434, 'Gas Station', 1729036800000, '', -465500, 4, 32),
(435, 'Coffee Shop', 1729296000000, '', -108500, 4, 14),
(436, 'Supplies', 1729555200000, '', -377800, 4, 9),
(437, 'Restaurant', 1729814400000, '', -776000, 4, 13),
(438, 'Clothes', 1730073600000, '', -1039900, 4, 17),
(439, 'Groceries', 1730332800000, '', -884400, 4, 11),
(440, 'Pharmacy', 1730592000000, '', -199500, 4, 26),
(441, 'Gas Station', 1730851200000, '', -432000, 4, 32),
(442, 'Coffee Shop', 1731110400000, '', -124000, 4, 14),
(443, 'Supplies', 1731369600000, '', -521500, 4, 9),
(444, 'Restaurant', 1731628800000, '', -853300, 4, 13),
(445, 'Clothes', 1731888000000, '', -1345000, 4, 17),
(446, 'Groceries', 1732147200000, '', -967800, 4, 11),
(447, 'Pharmacy', 1732406400000, '', -286700, 4, 26),
(448, 'Gas Station', 1732665600000, '', -498500, 4, 32),
(449, 'Coffee Shop', 1732924800000, '', -99000, 4, 14),
(450, 'Supplies', 1733184000000, '', -412300, 4, 9),
(451, 'Restaurant', 1733443200000, '', -728800, 4, 13),
(452, 'Clothes', 1733702400000, '', -1679900, 4, 17),
(453, 'Groceries', 1733961600000, '', -1024500, 4, 11),
(454, 'Pharmacy', 1734220800000, '', -245600, 4, 26),
(455, 'Gas Station', 1734480000000, '', -517000, 4, 32),
(456, 'Coffee Shop', 1734739200000, '', -117500, 4, 14),
(457, 'Supplies', 1734998400000, '', -653200, 4, 9),
(458, 'Restaurant', 1735257600000, '', -895000, 4, 13),
(459, 'Clothes', 1735516800000, '', -1247800, 4, 17),
(460, 'Groceries', 1735776000000, '', -796500, 4, 11),
(461, 'Pharmacy', 1736035200000, '', -178900, 4, 26),
(462, 'Gas Station', 1736294400000, '', -443000, 4, 32),
(463, 'Coffee Shop', 1736553600000, '', -89500, 4, 14),
(464, 'Supplies', 1736812800000, '', -336700, 4, 9),
(465, 'Restaurant', 1737072000000, '', -762500, 4, 13),
(466, 'Clothes', 1737331200000, '', -1499900, 4, 17),
(467, 'Groceries', 1737590400000, '', -879000, 4, 11),
(468, 'Pharmacy', 1737849600000, '', -217800, 4, 26),
(469, 'Gas Station', 1738108800000, '', -476500, 4, 32),
(470, 'Coffee Shop', 1738368000000, '', -121000, 4, 14),
(471, 'Supplies', 1738627200000, '', -564400, 4, 9),
(472, 'Restaurant', 1738886400000, '', -687700, 4, 13),
(473, 'Clothes', 1739145600000, '', -1186000, 4, 17),
(474, 'Groceries', 1739404800000, '', -932500, 4, 11),
(475, 'Pharmacy', 1739664000000, '', -259900, 4, 26),
(476, 'Gas Station', 1739923200000, '', -409000, 4, 32),
(477, 'Coffee Shop', 1740182400000, '', -103500, 4, 14),
(478, 'Supplies', 1740441600000, '', -488800, 4, 9),
(479, 'Restaurant', 1740700800000, '', -821500, 4, 13),
(480, 'Clothes', 1740960000000, '', -1364500, 4, 17),
(481, 'Groceries', 1741219200000, '', -856700, 4, 11),
(482, 'Pharmacy', 1741478400000, '', -203400, 4, 26),
(483, 'Gas Station', 1741737600000, '', -458000, 4, 32),
(484, 'Coffee Shop', 1741996800000, '', -115500, 4, 14),
(485, 'Supplies', 1742256000000, '', -397600, 4, 9),
(486, 'Restaurant', 1742515200000, '', -749900, 4, 13),
(487, 'Clothes', 1742774400000, '', -1082300, 4, 17),
(488, 'Groceries', 1743033600000, '', -901100, 4, 11),
(489, 'Pharmacy', 1743292800000, '', -234500, 4, 26),
(490, 'Gas Station', 1743552000000, '', -482500, 4, 32),
(491, 'Coffee Shop', 1743811200000, '', -97000, 4, 14),
(492, 'Supplies', 1744070400000, '', -543300, 4, 9),
(493, 'Restaurant', 1744329600000, '', -718500, 4, 13),
(494, 'Clothes', 1744588800000, '', -1427800, 4, 17),
(495, 'Groceries', 1744848000000, '', -869000, 4, 11),
(496, 'Pharmacy', 1745107200000, '', -189900, 4, 26),
(497, 'Gas Station', 1745366400000, '', -426500, 4, 32),
(498, 'Coffee Shop', 1745625600000, '', -128000, 4, 14),
(499, 'Supplies', 1745884800000, '', -465500, 4, 9),
(500, 'Restaurant', 1746144000000, '', -794000, 4, 13),
(501, 'Clothes', 1746403200000, '', -1256700, 4, 17),
(502, 'Groceries', 1746662400000, '', -943300, 4, 11),
(503, 'Pharmacy', 1746921600000, '', -277800, 4, 26),
(504, 'Gas Station', 1747180800000, '', -501500, 4, 32),
(505, 'Coffee Shop', 1747440000000, '', -102500, 4, 14),
(506, 'Supplies', 1747699200000, '', -429000, 4, 9),
(507, 'Restaurant', 1747958400000, '', -836500, 4, 13),
(508, 'Clothes', 1748217600000, '', -1599900, 4, 17),
(509, 'Groceries', 1748476800000, '', -887500, 4, 11),
(510, 'Payment', 1722384000000, '', 17000000, 4, -3),
(511, 'Payment', 1725062400000, '', 15000000, 4, -3),
(512, 'Payment', 1727654400000, '', 10000000, 4, -3),
(513, 'Payment', 1730332800000, '', 10000000, 4, -3),
(514, 'Payment', 1732924800000, '', 18000000, 4, -3),
(515, 'Payment', 1735603200000, '', 16000000, 4, -3),
(516, 'Payment', 1738281600000, '', 18000000, 4, -3),
(517, 'Payment', 1740700800000, '', 20000000, 4, -3),
(518, 'Payment', 1743379200000, '', 20000000, 4, -3),
(519, 'Payment', 1745971200000, '', 16000000, 4, -3),
(520, 'Payment', 1748649600000, '', 18000000, 4, -3),
(521, 'Pharmacy', 1748736000000, '', -224500, 4, 26),
(522, 'Gas Station', 1748995200000, '', -479000, 4, 32),
(523, 'Coffee Shop', 1749254400000, '', -114000, 4, 14),
(524, 'Supplies', 1749513600000, '', -516700, 4, 9),
(525, 'Restaurant', 1749772800000, '', -768800, 4, 13),
(526, 'Clothes', 1750032000000, '', -1332500, 4, 17),
(527, 'Groceries', 1750291200000, '', -924000, 4, 11),
(528, 'Pharmacy', 1750550400000, '', -197800, 4, 26),
(529, 'Gas Station', 1750809600000, '', -445500, 4, 32),
(530, 'Coffee Shop', 1751068800000, '', -98500, 4, 14),
(531, 'Payment', 1751241600000, '', 16000000, 4, -3),
(532, 'Credit Card Payment', 1722384000000, '', -17000000, 2, -3),
(533, 'Credit Card Payment', 1725062400000, '', -15000000, 2, -3),
(534, 'Credit Card Payment', 1727654400000, '', -10000000, 2, -3),
(536, 'Credit Card Payment', 1730332800000, '', -10000000, 2, -3),
(537, 'Credit Card Payment', 1732924800000, '', -18000000, 2, -3),
(538, 'Credit Card Payment', 1735603200000, '', -16000000, 2, -3),
(539, 'Credit Card Payment', 1738281600000, '', -18000000, 2, -3),
(540, 'Credit Card Payment', 1740700800000, '', -20000000, 2, -3),
(541, 'Credit Card Payment', 1743379200000, '', -20000000, 2, -3),
(542, 'Credit Card Payment', 1745971200000, '', -16000000, 2, -3),
(543, 'Credit Card Payment', 1748649600000, '', -18000000, 2, -3),
(544, 'Credit Card Payment', 1751241600000, '', -16000000, 2, -3),
(545, 'Transfer from Savings', 1734220800000, '', 40000000, 2, -3),
(546, 'Transfer to Checkings', 1734220800000, '', -40000000, 3, -3),
(547, 'Netflix', 1721001600000, '', -250000, 2, 22),
(548, 'Netflix', 1723680000000, '', -250000, 2, 22),
(549, 'Netflix', 1726358400000, '', -250000, 2, 22),
(550, 'Netflix', 1728950400000, '', -250000, 2, 22),
(551, 'Netflix', 1731628800000, '', -250000, 2, 22),
(552, 'Netflix', 1734220800000, '', -250000, 2, 22),
(553, 'Netflix', 1736899200000, '', -250000, 2, 22),
(554, 'Netflix', 1739577600000, '', -250000, 2, 22),
(555, 'Netflix', 1741996800000, '', -250000, 2, 22),
(556, 'Netflix', 1744675200000, '', -250000, 2, 22),
(557, 'Netflix', 1747267200000, '', -250000, 2, 22),
(558, 'Netflix', 1749945600000, '', -250000, 2, 22),
(559, 'Transfer from Savings', 1744675200000, '', 50000000, 2, -3),
(560, 'Transfer to Checkings', 1744675200000, '', -50000000, 3, -3),
(561, 'Gym', 1721433600000, '', -800000, 2, 47),
(562, 'Gym', 1724112000000, '', -800000, 2, 47),
(563, 'Gym', 1726790400000, '', -800000, 2, 47),
(564, 'Gym', 1729382400000, '', -800000, 2, 47),
(565, 'Gym', 1732060800000, '', -800000, 2, 47),
(566, 'Gym', 1734652800000, '', -800000, 2, 47),
(567, 'Gym', 1737331200000, '', -800000, 2, 47),
(568, 'Gym', 1740009600000, '', -800000, 2, 47),
(569, 'Gym', 1742428800000, '', -800000, 2, 47),
(570, 'Gym', 1745107200000, '', -800000, 2, 47),
(571, 'Gym', 1747699200000, '', -800000, 2, 47),
(572, 'Gym', 1750377600000, '', -800000, 2, 47),
(573, 'Movie Theater', 1726790400000, '', -285000, 4, 23),
(574, 'Concert', 1731888000000, '', -2000000, 4, 23),
(575, 'Vacation', 1739664000000, '', -4000000, 4, 39),
(576, 'Interest', 1719792000000, '', 384700, 3, 4),
(577, 'Interest', 1722470400000, '', 412300, 3, 4),
(578, 'Interest', 1725235200000, '', 398500, 3, 4),
(579, 'Interest', 1727740800000, '', 421000, 3, 4),
(580, 'Interest', 1730419200000, '', 379200, 3, 4),
(581, 'Interest', 1733097600000, '', 406800, 3, 4),
(582, 'Interest', 1735776000000, '', 393400, 3, 4),
(583, 'Interest', 1738540800000, '', 417600, 3, 4),
(584, 'Interest', 1740960000000, '', 388900, 3, 4),
(585, 'Interest', 1743465600000, '', 401500, 3, 4),
(586, 'Interest', 1746057600000, '', 423300, 3, 4),
(587, 'Interest', 1748822400000, '', 397100, 3, 4),
(588, 'Restaurant', 1719792000000, '', -246700, 4, 13),
(589, 'Clothes', 1719964800000, '', -1568900, 4, 17),
(590, 'Restaurant', 1720224000000, '', -334500, 4, 13),
(591, 'Supplies', 1720396800000, '', -899900, 4, 9),
(592, 'Coffee Shop', 1720656000000, '', -89000, 4, 14),
(593, 'Clothes', 1720828800000, '', -1475500, 4, 17),
(594, 'Restaurant', 1721088000000, '', -412500, 4, 13),
(595, 'Supplies', 1721260800000, '', -943300, 4, 9),
(596, 'Coffee Shop', 1721520000000, '', -125000, 4, 14),
(597, 'Clothes', 1721779200000, '', -2456700, 4, 17),
(598, 'Restaurant', 1722038400000, '', -267800, 4, 13),
(599, 'Supplies', 1722211200000, '', -1274000, 4, 9),
(600, 'Restaurant', 1722556800000, '', -219900, 4, 13),
(601, 'Clothes', 1722816000000, '', -2038800, 4, 17),
(602, 'Restaurant', 1723075200000, '', -547500, 4, 13),
(603, 'Supplies', 1723334400000, '', -789000, 4, 9),
(604, 'Coffee Shop', 1723593600000, '', -94500, 4, 14),
(605, 'Clothes', 1723852800000, '', -1990000, 4, 17),
(606, 'Restaurant', 1724112000000, '', -298500, 4, 13),
(607, 'Supplies', 1724371200000, '', -672300, 4, 9),
(608, 'Coffee Shop', 1724630400000, '', -134000, 4, 14),
(609, 'Supplies', 1724889600000, '', -895600, 4, 9),
(610, 'Restaurant', 1725148800000, '', -429000, 4, 13),
(611, 'Clothes', 1725408000000, '', -1345000, 4, 17),
(612, 'Coffee Shop', 1725667200000, '', -72500, 4, 14),
(613, 'Supplies', 1725926400000, '', -927800, 4, 9),
(614, 'Restaurant', 1726185600000, '', -386000, 4, 13),
(615, 'Clothes', 1726444800000, '', -1239900, 4, 17),
(616, 'Restaurant', 1726704000000, '', -257500, 4, 13),
(617, 'Supplies', 1726963200000, '', -564400, 4, 9),
(618, 'Restaurant', 1727222400000, '', -679500, 4, 13),
(619, 'Clothes', 1727481600000, '', -1786500, 4, 17),
(620, 'Coffee Shop', 1727740800000, '', -105000, 4, 14),
(621, 'Supplies', 1728000000000, '', -1456700, 4, 9),
(622, 'Restaurant', 1728259200000, '', -368500, 4, 13),
(623, 'Supplies', 1728518400000, '', -1389000, 4, 9),
(624, 'Coffee Shop', 1728777600000, '', -123000, 4, 14),
(625, 'Supplies', 1729036800000, '', -2347700, 4, 9),
(626, 'Restaurant', 1729296000000, '', -289500, 4, 13),
(627, 'Clothes', 1729555200000, '', -1712300, 4, 17),
(628, 'Restaurant', 1729814400000, '', -264000, 4, 13),
(629, 'Supplies', 1730073600000, '', -1238800, 4, 9),
(630, 'Coffee Shop', 1730332800000, '', -117500, 4, 14),
(631, 'Clothes', 1730592000000, '', -1894500, 4, 17),
(632, 'Restaurant', 1730851200000, '', -438000, 4, 13),
(633, 'Supplies', 1731110400000, '', -1569900, 4, 9),
(634, 'Coffee Shop', 1731369600000, '', -142000, 4, 14),
(635, 'Supplies', 1731628800000, '', -1673400, 4, 9),
(636, 'Restaurant', 1731888000000, '', -316500, 4, 13),
(637, 'Clothes', 1732147200000, '', -1987700, 4, 17),
(638, 'Restaurant', 1732406400000, '', -455000, 4, 13),
(639, 'Supplies', 1732665600000, '', -1432200, 4, 9),
(640, 'Restaurant', 1732924800000, '', -397500, 4, 13),
(641, 'Clothes', 1733184000000, '', -1456000, 4, 17),
(642, 'Restaurant', 1733443200000, '', -349000, 4, 13),
(643, 'Supplies', 1733702400000, '', -1678800, 4, 9),
(644, 'Coffee Shop', 1733961600000, '', -89500, 4, 14),
(645, 'Clothes', 1734220800000, '', -2875000, 4, 17),
(646, 'Restaurant', 1734480000000, '', -564500, 4, 13),
(647, 'Clothes', 1734739200000, '', -1563300, 4, 17),
(648, 'Coffee Shop', 1734998400000, '', -178000, 4, 14),
(649, 'Supplies', 1735257600000, '', -896700, 4, 9),
(650, 'Restaurant', 1735516800000, '', -364000, 4, 13),
(651, 'Supplies', 1735776000000, '', -2349900, 4, 9),
(652, 'Coffee Shop', 1736035200000, '', -128500, 4, 14),
(653, 'Supplies', 1736294400000, '', -1124400, 4, 9),
(654, 'Restaurant', 1736553600000, '', -417000, 4, 13),
(655, 'Clothes', 1736812800000, '', -1672500, 4, 17),
(656, 'Coffee Shop', 1737072000000, '', -113000, 4, 14),
(657, 'Supplies', 1737331200000, '', -957800, 4, 9),
(658, 'Restaurant', 1737590400000, '', -489000, 4, 13),
(659, 'Clothes', 1737849600000, '', -2035500, 4, 17),
(660, 'Restaurant', 1738108800000, '', -265000, 4, 13),
(661, 'Supplies', 1738368000000, '', -1768900, 4, 9),
(662, 'Restaurant', 1738627200000, '', -327500, 4, 13),
(663, 'Clothes', 1738886400000, '', -1456700, 4, 17),
(664, 'Coffee Shop', 1739145600000, '', -99900, 4, 14),
(665, 'Supplies', 1739404800000, '', -1834400, 4, 9),
(666, 'Restaurant', 1739664000000, '', -378500, 4, 13),
(667, 'Supplies', 1739923200000, '', -1543000, 4, 9),
(668, 'Coffee Shop', 1740182400000, '', -139500, 4, 14),
(669, 'Supplies', 1740441600000, '', -1987700, 4, 9),
(670, 'Restaurant', 1740700800000, '', -296000, 4, 13),
(671, 'Clothes', 1740960000000, '', -1672300, 4, 17),
(672, 'Coffee Shop', 1741219200000, '', -144000, 4, 14),
(673, 'Supplies', 1741478400000, '', -1458800, 4, 9),
(674, 'Restaurant', 1741737600000, '', -399500, 4, 13),
(675, 'Supplies', 1741996800000, '', -1416700, 4, 9),
(676, 'Restaurant', 1742256000000, '', -445000, 4, 13),
(677, 'Clothes', 1742515200000, '', -1789000, 4, 17),
(678, 'Coffee Shop', 1742774400000, '', -102500, 4, 14),
(679, 'Supplies', 1743033600000, '', -1894500, 4, 9),
(680, 'Coffee Shop', 1743292800000, '', -77500, 4, 14),
(681, 'Supplies', 1743552000000, '', -1679900, 4, 9),
(682, 'Restaurant', 1743811200000, '', -313000, 4, 13),
(683, 'Clothes', 1744070400000, '', -2236700, 4, 17),
(684, 'Restaurant', 1744329600000, '', -368500, 4, 13),
(685, 'Supplies', 1744588800000, '', -1784400, 4, 9),
(686, 'Coffee Shop', 1744848000000, '', -119500, 4, 14),
(687, 'Clothes', 1745107200000, '', -2567800, 4, 17),
(688, 'Restaurant', 1745366400000, '', -337000, 4, 13),
(689, 'Clothes', 1745625600000, '', -1345500, 4, 17),
(690, 'Coffee Shop', 1745884800000, '', -92500, 4, 14),
(691, 'Supplies', 1746144000000, '', -1893300, 4, 9),
(692, 'Restaurant', 1746403200000, '', -424000, 4, 13),
(693, 'Clothes', 1746662400000, '', -1458000, 4, 17),
(694, 'Coffee Shop', 1746921600000, '', -126000, 4, 14),
(695, 'Supplies', 1747180800000, '', -1679000, 4, 9),
(696, 'Restaurant', 1747440000000, '', -517500, 4, 13),
(697, 'Clothes', 1747699200000, '', -1896700, 4, 17),
(698, 'Coffee Shop', 1747958400000, '', -108500, 4, 14),
(699, 'Supplies', 1748217600000, '', -1924400, 4, 9),
(700, 'Restaurant', 1748476800000, '', -389500, 4, 13),
(701, 'Clothes', 1748736000000, '', -1567800, 4, 17),
(702, 'Coffee Shop', 1748995200000, '', -114000, 4, 14),
(703, 'Supplies', 1749254400000, '', -1745600, 4, 9),
(704, 'Restaurant', 1749513600000, '', -452000, 4, 13),
(705, 'Supplies', 1749772800000, '', -1678900, 4, 9),
(706, 'Coffee Shop', 1750032000000, '', -137500, 4, 14),
(707, 'Supplies', 1750291200000, '', -2234500, 4, 9),
(708, 'Restaurant', 1750550400000, '', -346000, 4, 13),
(709, 'Clothes', 1750809600000, '', -1813300, 4, 17),
(710, 'Coffee Shop', 1751068800000, '', -129000, 4, 14),
(711, 'Transfer from Savings', 1731024000000, '', 50000000, 2, -3),
(712, 'Transfer to Checkings', 1731024000000, '', -50000000, 3, -3),
(713, 'Transfer from Savings', 1749859200000, '', 40000000, 2, -3),
(714, 'Transfer to Checkings', 1749859200000, '', -40000000, 3, -3);
''';

const _initTags = '''
INSERT INTO "tags" ("id", "name", "color", "listIndex") VALUES
(1, 'Needs Reimbursement', 4292425559, 0),
(2, 'Double Check', 4293060129, 1);
''';

Future<void> _hydrateDummyData(Database db) async {
  await db.execute(_initAccounts);
  await db.execute(_initHistory);
  await db.execute(_initReimbs);
  await db.execute(_initRules);
  await db.execute(_initTransactions);
  await db.execute(_initTags);
}
